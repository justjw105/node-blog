{
  "_from": "nodeom",
  "_id": "nodeom@0.0.1",
  "_inBundle": false,
  "_integrity": "sha1-e4IQxM81Huzimh9Xpx4S98pN8gs=",
  "_location": "/nodeom",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "nodeom",
    "fetchSpec": "latest",
    "name": "nodeom",
    "raw": "nodeom",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/nodeom/-/nodeom-0.0.1.tgz",
  "_shasum": "7b8210c4cf351eece29a1f57a71e12f7ca4df20b",
  "_shrinkwrap": null,
  "_spec": "nodeom",
  "_where": "/home/geekologist_new",
  "author": {
    "email": "fmartin91@gmail.com",
    "name": "Martin Fernandez"
  },
  "bugs": {
    "url": "https://github.com/suttna/nodeorm/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "inflected": "^2.0.2",
    "knex": "^0.14.2",
    "subtractiontype.ts": "^1.0.0"
  },
  "deprecated": false,
  "description": "Node Object Mapper",
  "devDependencies": {
    "@types/inflected": "^1.1.29",
    "@types/jest": "^21.1.5",
    "@types/knex": "^0.0.65",
    "@types/node": "^8.0.0",
    "codecov": "^3.0.0",
    "jest": "^20.0.0",
    "sqlite": "^2.8.0",
    "ts-jest": "^20.0.0",
    "tslint": "^5.0.0",
    "typescript": "2.6.1"
  },
  "homepage": "https://github.com/suttna/nodeorm#readme",
  "keywords": [
    "mapper",
    "node",
    "object",
    "orm",
    "sql"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "nodeom",
  "optionalDependencies": {},
  "readme": "# NodeOM [![npm version](https://badge.fury.io/js/nodeom.svg)](https://badge.fury.io/js/nodeom) [![codecov](https://codecov.io/gh/NodeOM/nodeom/branch/master/graph/badge.svg)](https://codecov.io/gh/NodeOM/nodeom) [![CircleCI](https://circleci.com/gh/NodeOM/nodeom.svg?style=svg)](https://circleci.com/gh/NodeOM/nodeom)\n\nNodeOM is a persistence library written in Typescript for Node. It supports high level abstractions to manipulate data from different persistence engines in a typesafe manner. Inspired by [rom-rb](http://rom-rb.org/) ❤️\n\n> Active development. Not ready for usage at this moment. ⚠️\n\n## Concepts\n\nNodeOM defines multiple abstractions that are independent from the the data storage. This abstractions allow the interoperation between different persistence engines. For example, you can have a relation backed by Postgres database and another relation powered by Redis and operate between them.\n\n### Schema\n\nA schema defines how data is structured. Schemas are powered by Generics to allow type safety operations between them.\n\n### Relations\n\nA relation is a set of tuples that provide database specific APIs for reading and writing. A sql adapter will expose the common operations that are allowed in sql like `select`, `where` or `join` while a redis adapter will expose operations like `hget`, `set` or `lpop`\n\n### Gateway\n\nA gateway is database specific object that manages the connection with the database. Gateways are also aware of the relations that belong to him.\n\n## Example\n\nThis is a very simple example of what is possible at the moment with NodeOM.\n\n```typescript\nexport interface IUserAttributes {\n  id?: number\n  email: string\n  name?: string\n  age?: number\n}\n\nexport interface ITestGateway {\n  users: IUserAttributes\n  // blogs: IBlogAttributes\n  // posts: IPostAttributes\n}\n\nconst gateway = new GatewaySQL<ITestGateway>({\n  client: \"sqlite3\",\n  connection: {\n    filename: \":memory:\",\n  },\n})\n\nawait gateway.connect()\n\nawait migrateSQLSchema(gateway)\n\nconst userSchema = new SchemaSQL<IUserAttributes>(\"users\")\n\nuserSchema.attribute(\"id\", \"INTEGER\", { primaryKey: true })\nuserSchema.attribute(\"email\", \"STRING\")\nuserSchema.attribute(\"name\", \"STRING\")\nuserSchema.attribute(\"age\", \"INTEGER\")\n\ngateway.registerSchemas([userSchema])\n\n// Select only the attribute you need.\ngateway.relation(\"users\").select(\"id\", \"email\").toArray()\n\n// Find by primaryKey\ngateway.relation(\"users\").byPk(44)\n\n// Find the first tuple\ngateway.relation(\"users\").first()\n\n// All tuples\ngateway.relation(\"users\").toArray()\n\n// Filter by some condition (only equals is supported)\ngateway.relation(\"users\").where({ name: \"John\" }).toArray()\n\n// Limit the returned tuples\ngateway.relation(\"users\").limit(10).toArray()\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/suttna/nodeorm.git"
  },
  "scripts": {
    "build": "tsc",
    "ci": "yarn lint && yarn build && yarn test",
    "docs": "typedoc --out docs lib/index.d.ts --mode file --gaID XXX --hideGenerator --readme none --name 'Node Object Mapper' && touch docs/.nojekyll",
    "lint": "tslint 'src/**/*.ts' '__tests__/**/*.ts'",
    "lint:fix": "tslint 'src/**/*.ts' '__tests__/**/*.ts' --fix",
    "posttest": "codecov -f coverage/*.json",
    "prepublish": "yarn build",
    "test": "jest --config jest.json --forceExit --runInBand --verbose",
    "watch": "tsc --watch"
  },
  "types": "lib/index.d.ts",
  "version": "0.0.1"
}
